{"ast":null,"code":"var _jsxFileName = \"D:\\\\8_HOMELANDER-main\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport './App.css';\nimport Reminder from './components/Reminder';\n// import RemainderForm from './components/ReminderForm';\nimport Clock from './components/Clock';\nimport React, { useEffect, useState, useRef } from 'react';\nimport { GoogleGenerativeAI } from \"@google/generative-ai\";\nimport { Bars } from 'react-loader-spinner';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst genAI = new GoogleGenerativeAI(`AIzaSyCdrlNjaAMpBkI1tL41UqyK7ii1pf1vRxY`);\nconst model = genAI.getGenerativeModel({\n  model: \"gemini-1.5-flash\"\n});\nlet exampleResponse = `Got it. I've set a reminder for 01:58 for your medication.`;\nlet message = `Instruction for Gemini:\nWhenever the user mentions keywords like \"set a reminder,\" \"stop the reminder,\" or specific times for medication reminders, only respond positively using the predefined responses below. Do not mention anything about being a language model, physical limitations, or additional explanations.  Take the tim from user in 24 hrs time lik example:\" 23:52\" so if user says like 6 a.m take it as \" 06:00\" so you should handle it as 24 hrs on a.m and p.m. respectively Just respond as if the reminder is being handled. \nAfter generating the positive response, just add further string after it and generate anything you want after it following is the string \"homlanderTeamIsBest\" \n`;\nfunction App() {\n  _s();\n  const [recognizedText, setRecognizedText] = useState(message);\n  const [isListening, setIsListening] = useState(false);\n  const [chatHistory, setChatHistory] = useState([]);\n  const [inputMessage, setInputMessage] = useState('');\n  const [time, setTime] = useState('');\n  const [reminderSet, setReminderSet] = useState(false);\n  const recognitionRef = useRef(null);\n  const [backgroundColor, setBackgroundColor] = useState('#151d23');\n  let silenceTimeout;\n  const [reminders, setReminders] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [flagNum, setFlagNum] = useState(true);\n  const [currentReminder, setCurrentReminder] = useState(null);\n  useEffect(() => {\n    if ('webkitSpeechRecognition' in window) {\n      const recognition = new window.webkitSpeechRecognition();\n      recognition.continuous = true;\n      recognition.interimResults = true;\n      recognition.onresult = event => {\n        let transcript = '';\n        for (let i = event.resultIndex; i < event.results.length; i++) {\n          transcript += event.results[i][0].transcript;\n        }\n        if (transcript) {\n          setRecognizedText(message + transcript);\n          clearTimeout(silenceTimeout);\n          silenceTimeout = setTimeout(() => {\n            handleUserInput(message + transcript);\n          }, 3000); // 3 seconds of silence\n        }\n      };\n      recognition.onstart = () => {\n        setIsListening(true);\n      };\n      recognition.onend = () => {\n        setIsListening(false);\n        // Automatically restart listening only if it's not manually stopped\n        if (isListening) {\n          toggleListening();\n        }\n      };\n      recognition.onerror = event => {\n        console.error('Speech recognition error:', event.error);\n        setIsListening(false);\n        clearTimeout(silenceTimeout);\n      };\n      recognitionRef.current = recognition; // Store recognition in useRef\n    } else {\n      alert('Your browser does not support speech recognition. Please try Chrome.');\n    }\n    return () => {\n      if (recognitionRef.current) {\n        recognitionRef.current.stop();\n      }\n      clearTimeout(silenceTimeout);\n    };\n  }, []);\n  useEffect(() => {\n    let intervalId;\n    if (currentReminder) {\n      intervalId = setInterval(() => {\n        setBackgroundColor(prevColor => prevColor === '#151d23' ? '#3c5364' : '#151d23' // Toggle between #151d23 and #3c5364\n        );\n      }, 500); // Change color every 500ms\n    } else {\n      setBackgroundColor('#151d23'); // Reset to default background when no reminder\n    }\n\n    // Cleanup interval on unmount or when currentReminder changes\n    return () => {\n      if (intervalId) {\n        clearInterval(intervalId);\n      }\n    };\n  }, [currentReminder]);\n  const handleUserInput = async input => {\n    if (input.toLowerCase().includes(\"set a reminder\") && time) {\n      // setReminder(input);\n      return;\n    }\n    setChatHistory(prev => [...prev, {\n      role: 'user',\n      text: input\n    }]);\n    let response = await model.startChat({\n      history: [{\n        role: \"user\",\n        parts: [{\n          text: input\n        }]\n      }]\n    }).sendMessage(input);\n    const responseText = response.response.text();\n    const trimmedResponse = responseText.split(\"homlanderTeamIsBest\")[0].trim();\n    // console.log(trimmedResponse);\n\n    setReminder(trimmedResponse, 1);\n    setChatHistory(prev => [...prev, {\n      role: 'model',\n      text: trimmedResponse\n    }]);\n    speak(trimmedResponse);\n  };\n  const toggleLoader = () => {\n    setIsLoading(!isLoading);\n  };\n  const speak = text => {\n    const utterance = new SpeechSynthesisUtterance(text);\n    utterance.pitch = 1; // Adjust pitch if needed\n    utterance.rate = 1; // Adjust rate if needed\n    speechSynthesis.speak(utterance);\n  };\n  const toggleListening = async () => {\n    toggleLoader();\n    if (isListening) {\n      recognitionRef.current.stop(); // Stop voice recognition\n      setIsListening(false); // Update state to reflect that listening has stopped\n      setFlagNum(true); // Reset flagNum to allow playing the message next time\n    } else {\n      setRecognizedText(message); // Clear previous text\n      recognitionRef.current.start(); // Start voice recognition\n      setIsListening(true); // Update state to reflect that listening has started\n\n      // Play the welcome message every time starting to listen\n      speak(\"Hello! Please provide the time, medicine name, and dosage for your reminder.\");\n    }\n    toggleLoader();\n  };\n  const handleInput = e => {\n    setInputMessage(e.target.value);\n  };\n  const playAlarm = () => {\n    const audio = new Audio('/alarm.mp3'); // Correct path if in the public folder\n    audio.play(); // Play the sound\n  };\n  const setReminder = (trimmedResponse, flag) => {\n    const [timePart] = trimmedResponse.match(/(\\d{1,2}:\\d{2})/); // Extract time from exampleResponse\n    const [hours, minutes] = timePart.split(':').map(Number);\n    if (flag === 1) setReminders(prev => [...prev, {\n      timePart,\n      trimmedResponse\n    }]);\n    const now = new Date();\n    const reminderTime = new Date();\n    reminderTime.setHours(hours);\n    reminderTime.setMinutes(minutes);\n    reminderTime.setSeconds(0);\n    if (reminderTime < now) {\n      reminderTime.setDate(reminderTime.getDate() + 1); // Set for next day if in the past\n    }\n    const timeout = reminderTime.getTime() - now.getTime();\n    setReminderSet(true);\n    // alert(`Reminder set for ${timePart}.`); // Notify user that reminder is set\n\n    setTimeout(() => {\n      const reminderText = trimmedResponse;\n      playAlarm(); // Play the alarm sound\n      speak(reminderText); // Announce the reminder\n\n      // Set the reminder details to display\n      setCurrentReminder({\n        time: timePart,\n        message: trimmedResponse\n      });\n      setReminderSet(false); // Reset reminder state\n      setTime(''); // Clear time input\n\n      // Set another timeout to clear the displayed reminder after 5 seconds\n      setTimeout(() => {\n        setCurrentReminder(null);\n      }, 6000); // Clear reminder details after 5 seconds\n    }, timeout);\n  };\n  const handleTimeChange = event => {\n    const selectedTime = event.target.value; // Get the selected time\n    setTime(selectedTime); // Update state with selected time\n  };\n  const convertTimeToString = time => {\n    const [hours, minutes] = time.split(':');\n    const formattedHours = String(hours).padStart(2, '0'); // Ensure two digits\n    const formattedMinutes = String(minutes).padStart(2, '0'); // Ensure two digits\n    return `${formattedHours}:${formattedMinutes}`;\n  };\n\n  // Usage\n\n  function handleSubmit() {\n    const timeString = convertTimeToString(time); // \"06:00\"\n    const trimmedResponse = timeString + inputMessage;\n    setReminder(trimmedResponse, 2);\n    setReminders(prev => [...prev, {\n      timePart: timeString,\n      trimmedResponse: inputMessage\n    }]);\n  }\n  const handleDeleteReminder = indexToDelete => {\n    setReminders(prevReminders => prevReminders.filter((_, index) => index !== indexToDelete));\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"bg-[#080c0e] w-full h-screen text-white\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"h-[60px] w-full bg-black\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 240,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"flex w-full h-[calc(100%-60px)] justify-evenly items-center\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"w-[45%] bg-[#0f1417] rounded-2xl pt-5 pb-5 h-[90%]\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"h-full w-full flex flex-col justify-between items-center\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"h-[32%] w-full px-6 py-2 flex justify-between border-b-[4px] pb-6 border-[#080c0e]\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"h-[100%] w-[76%] rounded-2xl flex items-center text-center justify-center\",\n              style: {\n                backgroundColor,\n                // Apply the toggling background color\n                transition: 'background-color 0.5s ease-in-out' // Add smooth transition with ease-in-out effect\n              },\n              children: currentReminder ? /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"p-4\",\n                children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n                  className: \"text-4xl font-medium tracking-widest mb-2 text-[#746e6e]\",\n                  children: currentReminder.time\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 256,\n                  columnNumber: 21\n                }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                  className: \"text-[#746e6e]\",\n                  children: [\"Message: \", currentReminder.message]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 259,\n                  columnNumber: 21\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 255,\n                columnNumber: 19\n              }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n                className: \"text-2xl text-[#8e8888]\",\n                children: \"Active Reminders will be shown here\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 262,\n                columnNumber: 19\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 247,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"bg-[#151d23] h-[100%] w-[20%] rounded-2xl p-3 mr-1 flex flex-col items-center justify-center\",\n              children: isLoading === true ? /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"loader-container\",\n                children: /*#__PURE__*/_jsxDEV(Bars, {\n                  height: \"50\",\n                  width: \"80\",\n                  color: \"#4fa94d\",\n                  ariaLabel: \"bars-loading\",\n                  wrapperStyle: {},\n                  wrapperClass: \"\",\n                  visible: true\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 269,\n                  columnNumber: 21\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 268,\n                columnNumber: 19\n              }, this) : /*#__PURE__*/_jsxDEV(\"div\", {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 279,\n                columnNumber: 22\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 265,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 246,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"h4\", {\n            className: \"text-white p-2 text-xl\",\n            children: \"All Reminders\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 284,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"reminder-container mt-2 h-[75%] rounded-2xl w-full gap-5 flex-wrap overflow-y-scroll pr-5 pl-5\",\n            children: reminders.map((reminder, index) => /*#__PURE__*/_jsxDEV(Reminder, {\n              reminder: reminder,\n              index: index,\n              onDelete: handleDeleteReminder\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 287,\n              columnNumber: 52\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 285,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 244,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 243,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"flex flex-col w-[45%] h-[90%] justify-between\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"h-[55%] rounded-2xl p-5 bg-[#151d23] relative\",\n          children: /*#__PURE__*/_jsxDEV(Clock, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 295,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 294,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"h-[39%] rounded-2xl p-5 bg-[#151d23]\",\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"h-[47%] rounded-2xl bg-[#151d23] text-white\",\n            children: /*#__PURE__*/_jsxDEV(\"form\", {\n              className: \"flex flex-col gap-5\",\n              onSubmit: e => e.preventDefault(),\n              children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"flex item-center w-full h-[40px]\",\n                children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n                  className: \"text-center flex justify-center items-center text-xl\",\n                  children: \"Time\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 301,\n                  columnNumber: 19\n                }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n                  type: \"time\",\n                  id: \"time\",\n                  value: time,\n                  onChange: handleTimeChange,\n                  className: \"bg-[#252d32] rounded-md text-white px-10 ml-[68px]\",\n                  required: true\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 302,\n                  columnNumber: 19\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 300,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"flex item-center w-full h-[40px] gap-8 \",\n                children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n                  className: \"text-center flex justify-center items-center text-xl\",\n                  children: \"Message\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 313,\n                  columnNumber: 19\n                }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n                  type: \"text\",\n                  id: \"message\",\n                  onChange: handleInput,\n                  value: inputMessage,\n                  className: \"p-2 bg-[#252d32] px-3 rounded-md text-white w-full outline-none\",\n                  required: true\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 314,\n                  columnNumber: 19\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 312,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                onClick: handleSubmit,\n                className: \"bg-blue-700 hover:bg-blue-950 text-white p-2 rounded\"\n                // onClick={() => setReminder(recognizedText)}\n                ,\n                children: \"Submit\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 324,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                type: \"button\",\n                className: \"bg-green-500 hover:bg-green-600 text-white p-2 rounded\",\n                onClick: toggleListening,\n                children: isListening ? 'Stop Listening' : 'Start Listening'\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 332,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 299,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 298,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 297,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 293,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 241,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 238,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"jcDy0uOJIIEUqf00VDbBC6Os1nA=\");\n_c = App;\n;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["Reminder","Clock","React","useEffect","useState","useRef","GoogleGenerativeAI","Bars","jsxDEV","_jsxDEV","genAI","model","getGenerativeModel","exampleResponse","message","App","_s","recognizedText","setRecognizedText","isListening","setIsListening","chatHistory","setChatHistory","inputMessage","setInputMessage","time","setTime","reminderSet","setReminderSet","recognitionRef","backgroundColor","setBackgroundColor","silenceTimeout","reminders","setReminders","isLoading","setIsLoading","flagNum","setFlagNum","currentReminder","setCurrentReminder","window","recognition","webkitSpeechRecognition","continuous","interimResults","onresult","event","transcript","i","resultIndex","results","length","clearTimeout","setTimeout","handleUserInput","onstart","onend","toggleListening","onerror","console","error","current","alert","stop","intervalId","setInterval","prevColor","clearInterval","input","toLowerCase","includes","prev","role","text","response","startChat","history","parts","sendMessage","responseText","trimmedResponse","split","trim","setReminder","speak","toggleLoader","utterance","SpeechSynthesisUtterance","pitch","rate","speechSynthesis","start","handleInput","e","target","value","playAlarm","audio","Audio","play","flag","timePart","match","hours","minutes","map","Number","now","Date","reminderTime","setHours","setMinutes","setSeconds","setDate","getDate","timeout","getTime","reminderText","handleTimeChange","selectedTime","convertTimeToString","formattedHours","String","padStart","formattedMinutes","handleSubmit","timeString","handleDeleteReminder","indexToDelete","prevReminders","filter","_","index","className","children","fileName","_jsxFileName","lineNumber","columnNumber","style","transition","height","width","color","ariaLabel","wrapperStyle","wrapperClass","visible","reminder","onDelete","onSubmit","preventDefault","type","id","onChange","required","onClick","_c","$RefreshReg$"],"sources":["D:/8_HOMELANDER-main/src/App.js"],"sourcesContent":["import './App.css';\nimport Reminder from './components/Reminder';\n// import RemainderForm from './components/ReminderForm';\nimport Clock from './components/Clock';\nimport React, { useEffect, useState, useRef } from 'react';\nimport { GoogleGenerativeAI } from \"@google/generative-ai\";\nimport { Bars } from 'react-loader-spinner'\nconst genAI = new GoogleGenerativeAI(`AIzaSyCdrlNjaAMpBkI1tL41UqyK7ii1pf1vRxY`);\nconst model = genAI.getGenerativeModel({ model: \"gemini-1.5-flash\" });\nlet exampleResponse = `Got it. I've set a reminder for 01:58 for your medication.`;\nlet message = `Instruction for Gemini:\nWhenever the user mentions keywords like \"set a reminder,\" \"stop the reminder,\" or specific times for medication reminders, only respond positively using the predefined responses below. Do not mention anything about being a language model, physical limitations, or additional explanations.  Take the tim from user in 24 hrs time lik example:\" 23:52\" so if user says like 6 a.m take it as \" 06:00\" so you should handle it as 24 hrs on a.m and p.m. respectively Just respond as if the reminder is being handled. \nAfter generating the positive response, just add further string after it and generate anything you want after it following is the string \"homlanderTeamIsBest\" \n`;\n\n\nfunction App() {\n  const [recognizedText, setRecognizedText] = useState(message);\n  const [isListening, setIsListening] = useState(false);\n  const [chatHistory, setChatHistory] = useState([]);\n  const [inputMessage, setInputMessage] = useState('')\n  const [time, setTime] = useState('');\n  const [reminderSet, setReminderSet] = useState(false);\n  const recognitionRef = useRef(null);\n  const [backgroundColor, setBackgroundColor] = useState('#151d23');\n  let silenceTimeout;\n  const [reminders, setReminders] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n\n  const [flagNum, setFlagNum] = useState(true);\n  const [currentReminder, setCurrentReminder] = useState(null);\n\n\n  useEffect(() => {\n    if ('webkitSpeechRecognition' in window) {\n      const recognition = new window.webkitSpeechRecognition();\n      recognition.continuous = true;\n      recognition.interimResults = true;\n\n      recognition.onresult = (event) => {\n        let transcript = '';\n        for (let i = event.resultIndex; i < event.results.length; i++) {\n          transcript += event.results[i][0].transcript;\n        }\n\n        if (transcript) {\n          setRecognizedText(message + transcript);\n          clearTimeout(silenceTimeout);\n\n          silenceTimeout = setTimeout(() => {\n            handleUserInput(message + transcript);\n          }, 3000); // 3 seconds of silence\n        }\n      };\n\n      recognition.onstart = () => {\n        setIsListening(true);\n      };\n\n      recognition.onend = () => {\n        setIsListening(false);\n        // Automatically restart listening only if it's not manually stopped\n        if (isListening) {\n          toggleListening();\n        }\n      };\n\n      recognition.onerror = (event) => {\n        console.error('Speech recognition error:', event.error);\n        setIsListening(false);\n        clearTimeout(silenceTimeout);\n      };\n\n      recognitionRef.current = recognition; // Store recognition in useRef\n    } else {\n      alert('Your browser does not support speech recognition. Please try Chrome.');\n    }\n\n    return () => {\n      if (recognitionRef.current) {\n        recognitionRef.current.stop();\n      }\n      clearTimeout(silenceTimeout);\n    };\n  }, []);\n\n  useEffect(() => {\n    let intervalId;\n    if (currentReminder) {\n      intervalId = setInterval(() => {\n        setBackgroundColor((prevColor) =>\n          prevColor === '#151d23' ? '#3c5364' : '#151d23' // Toggle between #151d23 and #3c5364\n        );\n      }, 500); // Change color every 500ms\n    } else {\n      setBackgroundColor('#151d23'); // Reset to default background when no reminder\n    }\n\n    // Cleanup interval on unmount or when currentReminder changes\n    return () => {\n      if (intervalId) {\n        clearInterval(intervalId);\n      }\n    };\n  }, [currentReminder]);\n\n\n  const handleUserInput = async (input) => {\n    if (input.toLowerCase().includes(\"set a reminder\") && time) {\n      // setReminder(input);\n      return;\n    }\n\n    setChatHistory((prev) => [...prev, { role: 'user', text: input }]);\n\n    let response = await model.startChat({\n      history: [\n        { role: \"user\", parts: [{ text: input }] },\n      ],\n    }).sendMessage(input);\n\n    const responseText = response.response.text();\n    const trimmedResponse = responseText.split(\"homlanderTeamIsBest\")[0].trim();\n    // console.log(trimmedResponse);\n\n    setReminder(trimmedResponse, 1);\n\n    setChatHistory((prev) => [...prev, { role: 'model', text: trimmedResponse }]);\n    speak(trimmedResponse);\n  };\n\n  const toggleLoader = () => {\n    setIsLoading(!isLoading);\n  };\n\n  const speak = (text) => {\n    const utterance = new SpeechSynthesisUtterance(text);\n    utterance.pitch = 1; // Adjust pitch if needed\n    utterance.rate = 1;  // Adjust rate if needed\n    speechSynthesis.speak(utterance);\n  };\n\n  const toggleListening = async () => {\n    toggleLoader();\n    if (isListening) {\n      recognitionRef.current.stop(); // Stop voice recognition\n      setIsListening(false); // Update state to reflect that listening has stopped\n      setFlagNum(true); // Reset flagNum to allow playing the message next time\n    } else {\n      setRecognizedText(message); // Clear previous text\n      recognitionRef.current.start(); // Start voice recognition\n      setIsListening(true); // Update state to reflect that listening has started\n\n      // Play the welcome message every time starting to listen\n      speak(\"Hello! Please provide the time, medicine name, and dosage for your reminder.\");\n    }\n    toggleLoader();\n  };\n\n\n  const handleInput = (e) => {\n    setInputMessage(e.target.value);\n  };\n\n  const playAlarm = () => {\n    const audio = new Audio('/alarm.mp3'); // Correct path if in the public folder\n    audio.play(); // Play the sound\n  };\n\n  const setReminder = (trimmedResponse, flag) => {\n    const [timePart] = trimmedResponse.match(/(\\d{1,2}:\\d{2})/); // Extract time from exampleResponse\n    const [hours, minutes] = timePart.split(':').map(Number);\n    if (flag === 1) setReminders((prev) => [...prev, { timePart, trimmedResponse }]);\n\n    const now = new Date();\n    const reminderTime = new Date();\n    reminderTime.setHours(hours);\n    reminderTime.setMinutes(minutes);\n    reminderTime.setSeconds(0);\n\n    if (reminderTime < now) {\n      reminderTime.setDate(reminderTime.getDate() + 1); // Set for next day if in the past\n    }\n\n    const timeout = reminderTime.getTime() - now.getTime();\n\n    setReminderSet(true);\n    // alert(`Reminder set for ${timePart}.`); // Notify user that reminder is set\n\n    setTimeout(() => {\n      const reminderText = trimmedResponse;\n      playAlarm(); // Play the alarm sound\n      speak(reminderText); // Announce the reminder\n\n      // Set the reminder details to display\n      setCurrentReminder({ time: timePart, message: trimmedResponse });\n\n      setReminderSet(false); // Reset reminder state\n      setTime(''); // Clear time input\n\n      // Set another timeout to clear the displayed reminder after 5 seconds\n      setTimeout(() => {\n        setCurrentReminder(null);\n      }, 6000); // Clear reminder details after 5 seconds\n    }, timeout);\n  }\n\n  const handleTimeChange = (event) => {\n    const selectedTime = event.target.value; // Get the selected time\n    setTime(selectedTime); // Update state with selected time\n  };\n\n  const convertTimeToString = (time) => {\n    const [hours, minutes] = time.split(':');\n    const formattedHours = String(hours).padStart(2, '0'); // Ensure two digits\n    const formattedMinutes = String(minutes).padStart(2, '0'); // Ensure two digits\n    return `${formattedHours}:${formattedMinutes}`;\n  };\n\n  // Usage\n\n\n  function handleSubmit() {\n    const timeString = convertTimeToString(time); // \"06:00\"\n    const trimmedResponse = timeString + inputMessage;\n    setReminder(trimmedResponse, 2);\n    setReminders((prev) => [...prev, { timePart: timeString, trimmedResponse: inputMessage }]);\n  }\n\n  const handleDeleteReminder = (indexToDelete) => {\n    setReminders((prevReminders) =>\n      prevReminders.filter((_, index) => index !== indexToDelete)\n    );\n  };\n\n\n  return (\n    <div className='bg-[#080c0e] w-full h-screen text-white'>\n      {/* nav */}\n      <div className=\"h-[60px] w-full bg-black\"></div>\n      <div className=\"flex w-full h-[calc(100%-60px)] justify-evenly items-center\">\n        {/* ?=left */}\n        <div className=\"w-[45%] bg-[#0f1417] rounded-2xl pt-5 pb-5 h-[90%]\">\n          <div className='h-full w-full flex flex-col justify-between items-center'>\n            {/* user */}\n            <div className='h-[32%] w-full px-6 py-2 flex justify-between border-b-[4px] pb-6 border-[#080c0e]'>\n              <div\n                className=\"h-[100%] w-[76%] rounded-2xl flex items-center text-center justify-center\"\n                style={{\n                  backgroundColor, // Apply the toggling background color\n                  transition: 'background-color 0.5s ease-in-out', // Add smooth transition with ease-in-out effect\n                }}\n              >\n                {currentReminder ? (\n                  <div className=\"p-4\">\n                    <h3 className=\"text-4xl font-medium tracking-widest mb-2 text-[#746e6e]\">\n                      {currentReminder.time}\n                    </h3>\n                    <p className=\"text-[#746e6e]\">Message: {currentReminder.message}</p>\n                  </div>\n                ) : (\n                  <p className='text-2xl text-[#8e8888]'>Active Reminders will be shown here</p>\n                )}\n              </div>\n              <div className=\"bg-[#151d23] h-[100%] w-[20%] rounded-2xl p-3 mr-1 flex flex-col items-center justify-center\">\n                {/* Display the gender text based on the state */}\n                {isLoading === true?  (\n                  <div className=\"loader-container\">\n                    <Bars\n                      height=\"50\"\n                      width=\"80\"\n                      color=\"#4fa94d\"\n                      ariaLabel=\"bars-loading\"\n                      wrapperStyle={{}}\n                      wrapperClass=\"\"\n                      visible={true}\n                    />\n                  </div>\n                ) : (<div></div>)}\n              </div>\n\n            </div>\n            {/* reminder */}\n            <h4 className='text-white p-2 text-xl'>All Reminders</h4>\n            <div className='reminder-container mt-2 h-[75%] rounded-2xl w-full gap-5 flex-wrap overflow-y-scroll pr-5 pl-5'>\n              {\n                reminders.map((reminder, index) => <Reminder reminder={reminder} index={index} onDelete={handleDeleteReminder} />)\n              }\n            </div>\n          </div>\n        </div>\n        {/* right */}\n        <div className=\"flex flex-col w-[45%] h-[90%] justify-between\">\n          <div className=\"h-[55%] rounded-2xl p-5 bg-[#151d23] relative\">\n            <Clock />\n          </div>\n          <div className=\"h-[39%] rounded-2xl p-5 bg-[#151d23]\">\n            <div className=\"h-[47%] rounded-2xl bg-[#151d23] text-white\">\n              <form className=\"flex flex-col gap-5\" onSubmit={(e) => e.preventDefault()}>\n                <div className=\"flex item-center w-full h-[40px]\">\n                  <h3 className=\"text-center flex justify-center items-center text-xl\">Time</h3>\n                  <input\n                    type=\"time\"\n                    id=\"time\"\n                    value={time}\n                    onChange={handleTimeChange}\n                    className=\"bg-[#252d32] rounded-md text-white px-10 ml-[68px]\"\n                    required\n                  />\n                </div>\n\n                <div className=\"flex item-center w-full h-[40px] gap-8 \">\n                  <h3 className=\"text-center flex justify-center items-center text-xl\">Message</h3>\n                  <input\n                    type=\"text\"\n                    id=\"message\"\n                    onChange={handleInput}\n                    value={inputMessage}\n                    className=\"p-2 bg-[#252d32] px-3 rounded-md text-white w-full outline-none\"\n                    required\n                  />\n                </div>\n\n                <button\n                  onClick={handleSubmit}\n                  className=\"bg-blue-700 hover:bg-blue-950 text-white p-2 rounded\"\n                // onClick={() => setReminder(recognizedText)}\n                >\n                  Submit\n                </button>\n\n                <button\n                  type=\"button\"\n                  className=\"bg-green-500 hover:bg-green-600 text-white p-2 rounded\"\n                  onClick={toggleListening}\n                >\n                  {isListening ? 'Stop Listening' : 'Start Listening'}\n                </button>\n              </form>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  )\n};\n\nexport default App;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}